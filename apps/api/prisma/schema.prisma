generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "public")]
}

model User {
  uid         String   @id @default(cuid())
  email       String?  @unique
  displayName String?
  slug        String?  @unique
  photoURL    String?
  isStudent   Boolean?
  collegeName String?

  refreshToken String?
  createdAt    DateTime @default(now())

  organizationMember OrganizationMember[]
  providerAccounts   Account[]

  Response Response[]
  Ticket   Ticket[]
  Kanban   Kanban[]
  Task     Task[]
  Comment  Comment[]
}

model Account {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [uid])

  provider          String
  providerAccountId String

  providerAccessToken  String?
  providerRefreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId], name: "verify_provider_account")
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String @unique

  members OrganizationMember[]
  invites OrganizationInvite[]
  events  Events[]

  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganizationMember {
  id   String @id @default(cuid())
  role Role

  userUid String
  user    User   @relation(fields: [userUid], references: [uid])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userUid, organizationId])
}

model OrganizationInvite {
  id           String @id @default(cuid())
  inviteeEmail String
  inviteeRole  Role

  inviterUid     String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([inviteeEmail, organizationId])
}

model Events {
  id                    String       @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  name                  String
  slug                  String       @unique
  website               String?
  location              String
  lastDate              DateTime?
  organizationId        String
  isPublished           Boolean      @default(false)
  description           Json?
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  isTeamEvent           Boolean      @default(false)
  maxTeamSize           Int          @default(1)
  minTeamSize           Int          @default(1)
  isCollegeEvent        Boolean      @default(false)
  isFormPublished       Boolean      @default(false)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  maxTicketCount        Int?
  eventDate             DateTime?
  form                  Field[]
  coverImage            String?
  Response              Response[]
  ticketPrice           Int          @default(0)
  stripe_price_object   String?
  stripe_product_object String?
  Ticket                Ticket[]
  kanban                Kanban[]

  embedding_description Unsupported("vector(768)")?
  embedding_title       Unsupported("vector(768)")?
}

model Field {
  id String @id @default(cuid())

  label       String
  placeholder String?
  options     String[]

  required Boolean @default(false)

  type FieldType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Events    Events?  @relation(fields: [eventsId], references: [id])
  eventsId  String?
}

model Response {
  id   String @id @default(cuid())
  user User   @relation(fields: [userUid], references: [uid])

  data Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userUid   String
  Events    Events?  @relation(fields: [eventsId], references: [id])
  eventsId  String?
}

model Ticket {
  id       String @id @default(cuid())
  event    Events @relation(fields: [eventsId], references: [id])
  eventsId String
  user     User   @relation(fields: [userUid], references: [uid])
  userUid  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kanban {
  id        String @id @default(cuid())
  title     String
  tasks     Task[]
  order     Int    @default(1)
  createdBy User   @relation(fields: [userUid], references: [uid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userUid   String
  Events    Events?  @relation(fields: [eventsId], references: [id], onDelete: Cascade)
  eventsId  String?
}

model Task {
  id        String    @id @default(cuid())
  title     String
  createdBy User      @relation(fields: [userUid], references: [uid])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Kanban    Kanban?   @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  kanbanId  String?
  userUid   String
  Comment   Comment[]
}

model Comment {
  id      String @id @default(cuid())
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  String
  data    Json
  user    User   @relation(fields: [userUid], references: [uid])
  userUid String
}

model SamlConfig {
  id                   String   @id @default(cuid())
  issuer               String   @unique
  cert                 String
  entryPoint           String
  wantAssertionsSigned Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum FieldType {
  SingleLineText
  LongText
  SingleSelect
  MultiSelect
  Checkbox
  Number
  Email
  URL
  PhoneNumber
  Attachment
  DateTime
}
