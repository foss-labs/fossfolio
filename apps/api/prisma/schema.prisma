generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid                String               @id @default(cuid())
  email              String?              @unique
  displayName        String?
  slug               String?              @unique
  photoURL           String?
  refreshToken       String?
  createdAt          DateTime             @default(now())
  collegeName        String?
  isStudent          Boolean?
  providerAccounts   Account[]
  Comment            Comment[]
  Kanban             Kanban[]
  organizationMember OrganizationMember[]
  Response           Response[]
  Task               Task[]
  Ticket             Ticket[]
}

model Account {
  id                   String   @id @default(cuid())
  userId               String
  provider             String
  providerAccountId    String
  providerAccessToken  String?
  providerRefreshToken String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [uid])

  @@unique([provider, providerAccountId], name: "verify_provider_account")
}

model Organization {
  id        String               @id @default(cuid())
  name      String
  slug      String               @unique
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  events    Events[]
  invites   OrganizationInvite[]
  members   OrganizationMember[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userUid        String
  role           Role
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userUid], references: [uid])

  @@unique([userUid, organizationId])
}

model OrganizationInvite {
  id             String       @id @default(cuid())
  inviteeEmail   String
  inviteeRole    Role
  inviterUid     String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([inviteeEmail, organizationId])
}

model Events {
  id                    String       @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  name                  String
  website               String?
  location              String
  createdAt             DateTime     @default(now())
  lastDate              DateTime?
  organizationId        String
  isPublished           Boolean      @default(false)
  description           Json?
  isCollegeEvent        Boolean      @default(false)
  isTeamEvent           Boolean      @default(false)
  maxTeamSize           Int          @default(1)
  minTeamSize           Int          @default(1)
  updatedAt             DateTime     @updatedAt
  eventDate             DateTime?
  maxTicketCount        Int?
  coverImage            String?
  isFormPublished       Boolean      @default(false)
  ticketPrice           Int          @default(0)
  stripe_price_object   String?
  stripe_product_object String?
  slug                  String       @unique
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  form                  Field[]
  kanban                Kanban[]
  Response              Response[]
  Ticket                Ticket[]
}

model Field {
  id          String    @id @default(cuid())
  label       String
  placeholder String?
  required    Boolean   @default(false)
  type        FieldType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  eventsId    String?
  options     String[]
  Events      Events?   @relation(fields: [eventsId], references: [id])
}

model Response {
  id        String   @id @default(cuid())
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userUid   String
  eventsId  String?
  Events    Events?  @relation(fields: [eventsId], references: [id])
  user      User     @relation(fields: [userUid], references: [uid])
}

model Ticket {
  id        String   @id @default(cuid())
  eventsId  String
  userUid   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Events   @relation(fields: [eventsId], references: [id])
  user      User     @relation(fields: [userUid], references: [uid])
}

model Kanban {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userUid   String
  eventsId  String?
  Events    Events?  @relation(fields: [eventsId], references: [id])
  createdBy User     @relation(fields: [userUid], references: [uid])
  tasks     Task[]
}

model Task {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  kanbanId  String?
  userUid   String
  Comment   Comment[]
  Kanban    Kanban?   @relation(fields: [kanbanId], references: [id])
  createdBy User      @relation(fields: [userUid], references: [uid])
}

model Comment {
  id      String @id @default(cuid())
  taskId  String
  data    Json
  userUid String
  task    Task   @relation(fields: [taskId], references: [id])
  user    User   @relation(fields: [userUid], references: [uid])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum FieldType {
  SingleLineText
  LongText
  SingleSelect
  MultiSelect
  Checkbox
  Number
  Email
  URL
  PhoneNumber
  Attachment
}
